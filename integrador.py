"""
Module for generating Preliminary Technical Studies (ETP) using LangChain and AI language models.

This module provides a class for generating technical documentation and studies 
using different AI language model providers such as OpenAI and Anthropic.
"""
# etp_llm_generator.py
import re
import io
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.pagesizes import A4
import os
import streamlit as st
from typing import Dict, Any, Optional
from langchain_openai import ChatOpenAI
from langchain_anthropic import ChatAnthropic
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from dotenv import load_dotenv
import tempfile
from datetime import datetime


# Carrega vari√°veis de ambiente do arquivo .env
load_dotenv()


class AssistenteEtpInteligente:
    """
    Assistente inteligente para an√°lise contextual de campos do ETP.
    
    Fornece valida√ß√£o de consist√™ncia, completude e qualidade dos campos
    baseado no contexto dos campos anteriores e nas normas t√©cnicas.
    """
    
    def __init__(self, provider: str = "openai"):
        """
        Inicializa o assistente com um provedor LLM espec√≠fico.
        
        Args:
            provider (str): O provedor LLM a ser usado ('openai' ou 'anthropic')
        """
        self.provider = provider.lower()
        self.llm = self._get_llm()
        
        # Definir os prompts especializados para cada campo
        self.prompts_especializados = self._definir_prompts_especializados()
        
        # Mapeamento dos campos cr√≠ticos
        self.campos_criticos = [
            "descricao_necessidade",
            "historico",
            "solucoes_mercado",
            "dependencia_contratado",
            "transicao_contratual",
            "criterios_sustentabilidade",
            "estimativa_valor",
            "analise_riscos",
            "definicao_objeto",
            "justificativa_escolha",
            "previsao_pca",
            "estimativa_quantidades",
            "justificativa_parcelamento"
        ]
    
    def _get_llm(self):
        """Configura e retorna o modelo LLM com base no provedor."""
        if self.provider == "openai":
            api_key = os.environ.get("OPENAI_API_KEY", st.secrets.get("OPENAI_API_KEY"))
            if not api_key:
                st.warning("Chave de API da OpenAI n√£o configurada.")
                return None
            return ChatOpenAI(model="gpt-4o-mini", temperature=0.3, api_key=api_key, max_tokens=2000)

        elif self.provider == "anthropic":
            api_key = os.environ.get("ANTHROPIC_API_KEY", st.secrets.get("ANTHROPIC_API_KEY"))
            if not api_key:
                st.warning("Chave de API da Anthropic n√£o configurada.")
                return None
            return ChatAnthropic(model="claude-3-opus-20240229", temperature=0.3, api_key=api_key, max_tokens=2000)
        
        else:
            raise ValueError(f"Provedor LLM n√£o suportado: {self.provider}.")
    
    def _definir_prompts_especializados(self) -> Dict[str, str]:
        """Define os prompts especializados para cada campo cr√≠tico."""
        return {
            "descricao_necessidade": """
            Voc√™ √© um especialista em elabora√ß√£o de ETPs conforme a Lei 14.133/2021 e Manual TRT-2.
            
            Analise a DESCRI√á√ÉO DA NECESSIDADE considerando:
            
            CRIT√âRIOS OBRIGAT√ìRIOS:
            1. Clareza do problema identificado
            2. Conformidade com Decreto 9.507/2018 (an√°lise de execu√ß√£o direta)
            3. Justificativa para terceiriza√ß√£o (se aplic√°vel)
            4. Identifica√ß√£o de terceiriza√ß√£o l√≠cita/il√≠cita
            5. Linguagem t√©cnica formal adequada
            
            CONTEXTO ANTERIOR: {contexto_anterior}
            CONTE√öDO ATUAL: {conteudo_atual}
            
            Forne√ßa feedback estruturado:
            - ‚úÖ PONTOS POSITIVOS
            - ‚ö†Ô∏è PONTOS DE ATEN√á√ÉO
            - üìù SUGEST√ïES DE MELHORIA
            - üí° EXEMPLO MELHORADO (se necess√°rio)
            """,
            
            "historico": """
            Voc√™ √© um especialista em elabora√ß√£o de ETPs conforme a Lei 14.133/2021 e Manual TRT-2.
            
            Analise o HIST√ìRICO considerando:
            
            CRIT√âRIOS OBRIGAT√ìRIOS:
            1. Consist√™ncia com contrata√ß√µes anteriores mencionadas
            2. Li√ß√µes aprendidas identificadas e documentadas
            3. Oportunidades de melhoria espec√≠ficas
            4. An√°lise de relat√≥rios de gest√£o anteriores
            5. Boletins de Avalia√ß√£o de Desempenho referenciados
            
            CONTEXTO ANTERIOR: {contexto_anterior}
            CONTE√öDO ATUAL: {conteudo_atual}
            
            Forne√ßa feedback estruturado:
            - ‚úÖ PONTOS POSITIVOS
            - ‚ö†Ô∏è PONTOS DE ATEN√á√ÉO
            - üìù SUGEST√ïES DE MELHORIA
            - üí° EXEMPLO MELHORADO (se necess√°rio)
            """,
            
            "solucoes_mercado": """
            Voc√™ √© um especialista em elabora√ß√£o de ETPs conforme a Lei 14.133/2021 e Manual TRT-2.
            
            Analise as SOLU√á√ïES EXISTENTES NO MERCADO considerando:
            
            CRIT√âRIOS OBRIGAT√ìRIOS:
            1. Completude da pesquisa de mercado
            2. An√°lise comparativa adequada entre alternativas
            3. Vantagens e desvantagens bem fundamentadas
            4. Considera√ß√£o de execu√ß√£o direta pelo √≥rg√£o
            5. Justificativa t√©cnica/econ√¥mica da escolha
            
            CONTEXTO ANTERIOR: {contexto_anterior}
            CONTE√öDO ATUAL: {conteudo_atual}
            
            Forne√ßa feedback estruturado:
            - ‚úÖ PONTOS POSITIVOS
            - ‚ö†Ô∏è PONTOS DE ATEN√á√ÉO
            - üìù SUGEST√ïES DE MELHORIA
            - üí° EXEMPLO MELHORADO (se necess√°rio)
            """,
            
            "analise_riscos": """
            Voc√™ √© um especialista em elabora√ß√£o de ETPs conforme a Lei 14.133/2021 e Manual TRT-2.
            
            Analise o LEVANTAMENTO E AN√ÅLISE DE RISCOS considerando:
            
            CRIT√âRIOS OBRIGAT√ìRIOS:
            1. Mapa de Riscos obrigat√≥rio elaborado
            2. Identifica√ß√£o adequada de riscos (planejamento, sele√ß√£o, execu√ß√£o)
            3. Medidas de mitiga√ß√£o propostas
            4. An√°lise de probabilidade e impacto
            5. Conformidade com metodologia institucional
            
            CONTEXTO ANTERIOR: {contexto_anterior}
            CONTE√öDO ATUAL: {conteudo_atual}
            
            Forne√ßa feedback estruturado:
            - ‚úÖ PONTOS POSITIVOS
            - ‚ö†Ô∏è PONTOS DE ATEN√á√ÉO
            - üìù SUGEST√ïES DE MELHORIA
            - üí° EXEMPLO MELHORADO (se necess√°rio)
            """,
            
            "criterios_sustentabilidade": """
            Voc√™ √© um especialista em elabora√ß√£o de ETPs conforme a Lei 14.133/2021 e Manual TRT-2.
            
            Analise os CRIT√âRIOS DE SUSTENTABILIDADE considerando:
            
            CRIT√âRIOS OBRIGAT√ìRIOS:
            1. Conformidade com Guia de Contrata√ß√µes Sustent√°veis
            2. Impactos ambientais identificados
            3. Medidas mitigadoras espec√≠ficas
            4. Requisitos de baixo consumo de energia
            5. Log√≠stica reversa para desfazimento
            
            CONTEXTO ANTERIOR: {contexto_anterior}
            CONTE√öDO ATUAL: {conteudo_atual}
            
            Forne√ßa feedback estruturado:
            - ‚úÖ PONTOS POSITIVOS
            - ‚ö†Ô∏è PONTOS DE ATEN√á√ÉO
            - üìù SUGEST√ïES DE MELHORIA
            - üí° EXEMPLO MELHORADO (se necess√°rio)
            """,
            
            "estimativa_valor": """
            Voc√™ √© um especialista em elabora√ß√£o de ETPs conforme a Lei 14.133/2021 e Manual TRT-2.
            
            Analise a ESTIMATIVA DO VALOR DA CONTRATA√á√ÉO considerando:
            
            CRIT√âRIOS OBRIGAT√ìRIOS:
            1. Metodologia de pesquisa de pre√ßos conforme art. 23 Lei 14.133/2021
            2. Custos totais considerados (aquisi√ß√£o + acess√≥rios + ciclo de vida)
            3. An√°lise comparativa entre solu√ß√µes
            4. Mem√≥rias de c√°lculo apresentadas
            5. Fontes de pesquisa adequadas (Painel de Pre√ßos, SICAF, etc.)
            
            CONTEXTO ANTERIOR: {contexto_anterior}
            CONTE√öDO ATUAL: {conteudo_atual}
            
            Forne√ßa feedback estruturado:
            - ‚úÖ PONTOS POSITIVOS
            - ‚ö†Ô∏è PONTOS DE ATEN√á√ÉO
            - üìù SUGEST√ïES DE MELHORIA
            - üí° EXEMPLO MELHORADO (se necess√°rio)
            """,
            
            "definicao_objeto": """
            Voc√™ √© um especialista em elabora√ß√£o de ETPs conforme a Lei 14.133/2021 e Manual TRT-2.
            
            Analise a DEFINI√á√ÉO DO OBJETO considerando:
            
            CRIT√âRIOS OBRIGAT√ìRIOS:
            1. Clareza e precis√£o da descri√ß√£o
            2. Alinhamento com necessidade identificada
            3. Especifica√ß√µes t√©cnicas adequadas
            4. Conformidade com an√°lise de mercado realizada
            5. Possibilidade de originar m√∫ltiplos TRs
            
            CONTEXTO ANTERIOR: {contexto_anterior}
            CONTE√öDO ATUAL: {conteudo_atual}
            
            Forne√ßa feedback estruturado:
            - ‚úÖ PONTOS POSITIVOS
            - ‚ö†Ô∏è PONTOS DE ATEN√á√ÉO
            - üìù SUGEST√ïES DE MELHORIA
            - üí° EXEMPLO MELHORADO (se necess√°rio)
            """,
            
            "justificativa_escolha": """
            Voc√™ √© um especialista em elabora√ß√£o de ETPs conforme a Lei 14.133/2021 e Manual TRT-2.
            
            Analise a JUSTIFICATIVA DE ESCOLHA DA SOLU√á√ÉO considerando:
            
            CRIT√âRIOS OBRIGAT√ìRIOS:
            1. Fundamenta√ß√£o t√©cnica, operacional e financeira
            2. Compara√ß√£o adequada com alternativas
            3. Alinhamento com interesse p√∫blico
            4. Vantajosidade demonstrada
            5. Motiva√ß√£o clara das decis√µes
            
            CONTEXTO ANTERIOR: {contexto_anterior}
            CONTE√öDO ATUAL: {conteudo_atual}
            
            Forne√ßa feedback estruturado:
            - ‚úÖ PONTOS POSITIVOS
            - ‚ö†Ô∏è PONTOS DE ATEN√á√ÉO
            - üìù SUGEST√ïES DE MELHORIA
            - üí° EXEMPLO MELHORADO (se necess√°rio)
            """,
            
            "estimativa_quantidades": """
            Voc√™ √© um especialista em elabora√ß√£o de ETPs conforme a Lei 14.133/2021 e Manual TRT-2.
            
            Analise a ESTIMATIVA DE QUANTIDADES considerando:
            
            CRIT√âRIOS OBRIGAT√ìRIOS:
            1. Mem√≥rias de c√°lculo apresentadas
            2. Considera√ß√£o de economia de escala
            3. Interdepend√™ncias com outras contrata√ß√µes
            4. Hist√≥rico de consumo analisado
            5. Previs√µes futuras fundamentadas
            
            CONTEXTO ANTERIOR: {contexto_anterior}
            CONTE√öDO ATUAL: {conteudo_atual}
            
            Forne√ßa feedback estruturado:
            - ‚úÖ PONTOS POSITIVOS
            - ‚ö†Ô∏è PONTOS DE ATEN√á√ÉO
            - üìù SUGEST√ïES DE MELHORIA
            - üí° EXEMPLO MELHORADO (se necess√°rio)
            """,
            
            "justificativa_parcelamento": """
            Voc√™ √© um especialista em elabora√ß√£o de ETPs conforme a Lei 14.133/2021 e Manual TRT-2.
            
            Analise as JUSTIFICATIVAS PARA PARCELAMENTO, AGRUPAMENTO E SUBCONTRATA√á√ÉO considerando:
            
            CRIT√âRIOS OBRIGAT√ìRIOS:
            1. An√°lise de viabilidade t√©cnica e econ√¥mica
            2. Conformidade com S√∫mula 247 do TCU
            3. Justificativas adequadas para decis√µes
            4. Considera√ß√£o de economia de escala
            5. Avalia√ß√£o de divisibilidade do objeto
            
            CONTEXTO ANTERIOR: {contexto_anterior}
            CONTE√öDO ATUAL: {conteudo_atual}
            
            Forne√ßa feedback estruturado:
            - ‚úÖ PONTOS POSITIVOS
            - ‚ö†Ô∏è PONTOS DE ATEN√á√ÉO
            - üìù SUGEST√ïES DE MELHORIA
            - üí° EXEMPLO MELHORADO (se necess√°rio)
            """
        }
    
    def analisar_campo(self, nome_campo: str, conteudo_atual: str, contexto_anterior: Dict[str, Any]) -> Dict[str, Any]:
        """
        Analisa um campo espec√≠fico considerando o contexto anterior.
        
        Args:
            nome_campo (str): Nome do campo sendo analisado
            conteudo_atual (str): Conte√∫do atual do campo
            contexto_anterior (Dict): Contexto dos campos anteriores
            
        Returns:
            Dict: An√°lise estruturada com feedback e sugest√µes
        """
        if not self.llm:
            return {
                "erro": "LLM n√£o inicializado. Verifique as chaves de API.",
                "feedback": "",
                "sugestoes": [],
                "qualidade": "erro"
            }
        
        # Verificar se o campo tem prompt especializado
        if nome_campo not in self.prompts_especializados:
            return self._analise_generica(nome_campo, conteudo_atual, contexto_anterior)
        
        # Formatar contexto anterior
        contexto_formatado = self._formatar_contexto(contexto_anterior)
        
        # Obter prompt especializado
        prompt_template = self.prompts_especializados[nome_campo]
        
        # Criar prompt final
        prompt_final = prompt_template.format(
            contexto_anterior=contexto_formatado,
            conteudo_atual=conteudo_atual
        )
        
        try:
            # Criar template de chat
            chat_template = ChatPromptTemplate.from_messages([
                ("system", "Voc√™ √© um especialista em elabora√ß√£o de documentos t√©cnicos governamentais, "
                          "especialmente ETPs conforme Lei 14.133/2021 e Manual TRT-2."),
                ("user", prompt_final)
            ])
            
            # Criar cadeia de processamento
            chain = chat_template | self.llm | StrOutputParser()
            
            # Executar an√°lise
            resultado = chain.invoke({})
            
            # Processar resultado
            return self._processar_resultado_analise(resultado, nome_campo)
            
        except Exception as e:
            st.error(f"Erro na an√°lise do campo {nome_campo}: {str(e)}")
            return {
                "erro": f"Erro na an√°lise: {str(e)}",
                "feedback": "",
                "sugestoes": [],
                "qualidade": "erro"
            }
    
    def _formatar_contexto(self, contexto: Dict[str, Any]) -> str:
        """Formata o contexto anterior para inclus√£o no prompt."""
        if not contexto:
            return "Nenhum contexto anterior dispon√≠vel."
        
        contexto_formatado = []
        for campo, valor in contexto.items():
            if valor and str(valor).strip():
                contexto_formatado.append(f"**{campo.upper()}**: {str(valor)[:200]}...")
        
        return "\n".join(contexto_formatado) if contexto_formatado else "Nenhum contexto anterior dispon√≠vel."
    
    def _analise_generica(self, nome_campo: str, conteudo_atual: str, contexto_anterior: Dict[str, Any]) -> Dict[str, Any]:
        """Realiza an√°lise gen√©rica para campos sem prompt especializado."""
        prompt_generico = f"""
        Analise o campo "{nome_campo}" de um ETP considerando:
        
        1. Clareza e objetividade do conte√∫do
        2. Adequa√ß√£o √† linguagem t√©cnica formal
        3. Completude das informa√ß√µes
        4. Consist√™ncia com contexto anterior
        
        CONTEXTO ANTERIOR: {self._formatar_contexto(contexto_anterior)}
        CONTE√öDO ATUAL: {conteudo_atual}
        
        Forne√ßa feedback estruturado com sugest√µes de melhoria.
        """
        
        try:
            chat_template = ChatPromptTemplate.from_messages([
                ("system", "Voc√™ √© um especialista em documentos t√©cnicos governamentais."),
                ("user", prompt_generico)
            ])
            
            chain = chat_template | self.llm | StrOutputParser()
            resultado = chain.invoke({})
            
            return self._processar_resultado_analise(resultado, nome_campo)
            
        except Exception as e:
            return {
                "erro": f"Erro na an√°lise gen√©rica: {str(e)}",
                "feedback": "",
                "sugestoes": [],
                "qualidade": "erro"
            }
    
    def _processar_resultado_analise(self, resultado: str, nome_campo: str) -> Dict[str, Any]:
        """Processa o resultado da an√°lise e estrutura a resposta."""
        # Extrair se√ß√µes do resultado
        pontos_positivos = self._extrair_secao(resultado, "‚úÖ PONTOS POSITIVOS", "‚ö†Ô∏è")
        pontos_atencao = self._extrair_secao(resultado, "‚ö†Ô∏è PONTOS DE ATEN√á√ÉO", "üìù")
        sugestoes = self._extrair_secao(resultado, "üìù SUGEST√ïES DE MELHORIA", "üí°")
        exemplo = self._extrair_secao(resultado, "üí° EXEMPLO MELHORADO", "")
        
        # Determinar qualidade geral
        qualidade = self._determinar_qualidade(pontos_atencao, sugestoes)
        
        return {
            "campo": nome_campo,
            "feedback": resultado,
            "pontos_positivos": pontos_positivos,
            "pontos_atencao": pontos_atencao,
            "sugestoes": sugestoes,
            "exemplo_melhorado": exemplo,
            "qualidade": qualidade,
            "timestamp": datetime.now().isoformat()
        }
    
    def _extrair_secao(self, texto: str, inicio: str, fim: str) -> str:
        """Extrai uma se√ß√£o espec√≠fica do texto de an√°lise."""
        try:
            start_idx = texto.find(inicio)
            if start_idx == -1:
                return ""
            
            start_idx += len(inicio)
            
            if fim:
                end_idx = texto.find(fim, start_idx)
                if end_idx == -1:
                    return texto[start_idx:].strip()
                return texto[start_idx:end_idx].strip()
            else:
                return texto[start_idx:].strip()
                
        except Exception:
            return ""
    
    def _determinar_qualidade(self, pontos_atencao: str, sugestoes: str) -> str:
        """Determina a qualidade geral baseada nos pontos de aten√ß√£o e sugest√µes."""
        if not pontos_atencao and not sugestoes:
            return "excelente"
        elif len(pontos_atencao) < 100 and len(sugestoes) < 200:
            return "boa"
        elif len(pontos_atencao) < 300 and len(sugestoes) < 500:
            return "regular"
        else:
            return "precisa_melhorar"
    
    def validar_consistencia_geral(self, dados_etp: Dict[str, Any]) -> Dict[str, Any]:
        """
        Valida a consist√™ncia geral entre todos os campos do ETP.
        
        Args:
            dados_etp (Dict): Todos os dados do ETP preenchidos
            
        Returns:
            Dict: An√°lise de consist√™ncia geral
        """
        if not self.llm:
            return {"erro": "LLM n√£o inicializado"}
        
        prompt_consistencia = f"""
        Analise a consist√™ncia geral entre todos os campos deste ETP:
        
        DADOS DO ETP:
        {self._formatar_dados_completos(dados_etp)}
        
        Verifique:
        1. Consist√™ncia entre problema identificado e solu√ß√£o proposta
        2. Alinhamento entre hist√≥rico e necessidade atual
        3. Coer√™ncia entre an√°lise de mercado e escolha da solu√ß√£o
        4. Adequa√ß√£o entre riscos identificados e medidas propostas
        5. Conformidade geral com Lei 14.133/2021
        
        Forne√ßa an√°lise estruturada com:
        - Inconsist√™ncias identificadas
        - Recomenda√ß√µes de ajustes
        - Avalia√ß√£o geral de qualidade
        """
        
        try:
            chat_template = ChatPromptTemplate.from_messages([
                ("system", "Voc√™ √© um especialista em ETPs e Lei 14.133/2021."),
                ("user", prompt_consistencia)
            ])
            
            chain = chat_template | self.llm | StrOutputParser()
            resultado = chain.invoke({})
            
            return {
                "analise_geral": resultado,
                "timestamp": datetime.now().isoformat(),
                "status": "concluida"
            }
            
        except Exception as e:
            return {
                "erro": f"Erro na valida√ß√£o geral: {str(e)}",
                "status": "erro"
            }
    
    def _formatar_dados_completos(self, dados_etp: Dict[str, Any]) -> str:
        """Formata todos os dados do ETP para an√°lise geral."""
        dados_formatados = []
        
        for campo, valor in dados_etp.items():
            if valor and str(valor).strip():
                # Limitar tamanho para n√£o sobrecarregar o prompt
                valor_limitado = str(valor)[:300] + "..." if len(str(valor)) > 300 else str(valor)
                dados_formatados.append(f"**{campo.upper()}**: {valor_limitado}")
        
        return "\n\n".join(dados_formatados)
    
    def melhorar_texto(self, texto: str, tipo_melhoria: str = "geral") -> Dict[str, Any]:
        """
        Melhora um texto espec√≠fico com foco em qualidade t√©cnica.
        
        Args:
            texto (str): Texto a ser melhorado
            tipo_melhoria (str): Tipo de melhoria ('gramatica', 'tecnico', 'geral')
            
        Returns:
            Dict: Texto melhorado e explica√ß√£o das mudan√ßas
        """
        if not self.llm:
            return {"erro": "LLM n√£o inicializado"}
        
        prompts_melhoria = {
            "gramatica": """
            Corrija apenas os erros gramaticais e de ortografia do texto abaixo,
            mantendo o conte√∫do t√©cnico inalterado:
            
            TEXTO ORIGINAL:
            {texto}
            
            Forne√ßa:
            1. TEXTO CORRIGIDO
            2. PRINCIPAIS CORRE√á√ïES REALIZADAS
            """,
            
            "tecnico": """
            Melhore a linguagem t√©cnica do texto abaixo para adequ√°-lo aos padr√µes
            de documentos governamentais conforme Lei 14.133/2021:
            
            TEXTO ORIGINAL:
            {texto}
            
            Forne√ßa:
            1. TEXTO MELHORADO (linguagem t√©cnica formal)
            2. PRINCIPAIS MELHORIAS REALIZADAS
            """,
            
            "geral": """
            Melhore o texto abaixo considerando:
            - Corre√ß√£o gramatical
            - Linguagem t√©cnica formal adequada
            - Clareza e objetividade
            - Estrutura√ß√£o de par√°grafos
            
            TEXTO ORIGINAL:
            {texto}
            
            Forne√ßa:
            1. TEXTO MELHORADO
            2. PRINCIPAIS MELHORIAS REALIZADAS
            """
        }
        
        prompt_escolhido = prompts_melhoria.get(tipo_melhoria, prompts_melhoria["geral"])
        
        try:
            chat_template = ChatPromptTemplate.from_messages([
                ("system", "Voc√™ √© um especialista em reda√ß√£o t√©cnica para documentos governamentais."),
                ("user", prompt_escolhido.format(texto=texto))
            ])
            
            chain = chat_template | self.llm | StrOutputParser()
            resultado = chain.invoke({})
            
            # Processar resultado
            partes = resultado.split("2. PRINCIPAIS")
            texto_melhorado = partes[0].replace("1. TEXTO MELHORADO", "").replace("1. TEXTO CORRIGIDO", "").strip()
            melhorias = partes[1] if len(partes) > 1 else "Melhorias aplicadas."
            
            return {
                "texto_original": texto,
                "texto_melhorado": texto_melhorado,
                "melhorias_realizadas": melhorias,
                "tipo_melhoria": tipo_melhoria,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            return {
                "erro": f"Erro na melhoria do texto: {str(e)}",
                "texto_original": texto
            }
    
    def gerar_exemplo_campo(self, nome_campo: str, contexto_anterior: Dict[str, Any]) -> str:
        """
        Gera um exemplo de preenchimento para um campo espec√≠fico.
        
        Args:
            nome_campo (str): Nome do campo
            contexto_anterior (Dict): Contexto dos campos anteriores
            
        Returns:
            str: Exemplo de preenchimento
        """
        if not self.llm:
            return "Erro: LLM n√£o inicializado."
        
        contexto_formatado = self._formatar_contexto(contexto_anterior)
        
        prompt_exemplo = f"""
        Gere um exemplo de preenchimento para o campo "{nome_campo}" de um ETP,
        considerando o contexto anterior e as normas da Lei 14.133/2021.
        
        CONTEXTO ANTERIOR:
        {contexto_formatado}
        
        CAMPO A PREENCHER: {nome_campo}
        
        Forne√ßa um exemplo pr√°tico, t√©cnico e bem estruturado que sirva como
        refer√™ncia para o usu√°rio.
        """
        
        try:
            chat_template = ChatPromptTemplate.from_messages([
                ("system", "Voc√™ √© um especialista em ETPs e Lei 14.133/2021."),
                ("user", prompt_exemplo)
            ])
            
            chain = chat_template | self.llm | StrOutputParser()
            return chain.invoke({})
            
        except Exception as e:
            return f"Erro ao gerar exemplo: {str(e)}"
    
    def _mapear_campo_para_secao_trt2(self, nome_campo: str) -> Dict[str, str]:
        """Mapeia campos do formul√°rio para se√ß√µes do Manual TRT-2."""
        mapeamento = {
            "descricao_problema": {
                "secao_trt2": "1. DESCRI√á√ÉO DA NECESSIDADE",
                "prompt_especializado": "descricao_necessidade",
                "criterios_obrigatorios": [
                    "Conformidade com Decreto 9.507/2018",
                    "Justificativa para terceiriza√ß√£o",
                    "Identifica√ß√£o de terceiriza√ß√£o l√≠cita/il√≠cita",
                    "Linguagem t√©cnica formal"
                ]
            },
            "solucoes_mercado": {
                "secao_trt2": "3. SOLU√á√ïES EXISTENTES NO MERCADO",
                "prompt_especializado": "solucoes_mercado",
                "criterios_obrigatorios": [
                    "Pesquisa abrangente de alternativas",
                    "An√°lise comparativa t√©cnica e econ√¥mica",
                    "Considera√ß√£o de execu√ß√£o direta",
                    "Vantagens e desvantagens fundamentadas"
                ]
            },
            "solucao_proposta": {
                "secao_trt2": "7. DEFINI√á√ÉO DO OBJETO",
                "prompt_especializado": "definicao_objeto",
                "criterios_obrigatorios": [
                    "Descri√ß√£o t√©cnica precisa",
                    "Especifica√ß√µes detalhadas",
                    "Alinhamento com necessidade",
                    "Possibilidade de m√∫ltiplos TRs"
                ]
            },
            "justificativa_escolha": {
                "secao_trt2": "8. JUSTIFICATIVA DE ESCOLHA DA SOLU√á√ÉO",
                "prompt_especializado": "justificativa_escolha",
                "criterios_obrigatorios": [
                    "Fundamenta√ß√£o t√©cnica/operacional/financeira",
                    "Demonstra√ß√£o de vantajosidade",
                    "Compara√ß√£o com alternativas",
                    "Alinhamento com interesse p√∫blico"
                ]
            },
            "estrategia_implantacao": {
                "secao_trt2": "14. ESTRAT√âGIA DE IMPLANTA√á√ÉO",
                "prompt_especializado": "generico",
                "criterios_obrigatorios": [
                    "Metodologia de implementa√ß√£o detalhada",
                    "Cronograma executivo com marcos",
                    "Recursos humanos e materiais",
                    "Plano de gest√£o de mudan√ßas"
                ]
            },
            "beneficios": {
                "secao_trt2": "15. BENEF√çCIOS ESPERADOS",
                "prompt_especializado": "generico",
                "criterios_obrigatorios": [
                    "Benef√≠cios quantitativos e qualitativos",
                    "Indicadores de desempenho",
                    "Benefici√°rios diretos e indiretos",
                    "Retorno sobre investimento"
                ]
            }
        }
        
        return mapeamento.get(nome_campo, {
            "secao_trt2": "Se√ß√£o Gen√©rica",
            "prompt_especializado": "generico",
            "criterios_obrigatorios": ["An√°lise geral de qualidade"]
        })
    
    def analisar_campo_com_contexto_trt2(self, nome_campo: str, conteudo_atual: str,
                                        contexto_anterior: Dict[str, Any]) -> Dict[str, Any]:
        """
        Analisa campo considerando contexto TRT-2 e integra√ß√£o com novo prompt.
        """
        # Obter mapeamento para se√ß√£o TRT-2
        mapeamento = self._mapear_campo_para_secao_trt2(nome_campo)
        
        # An√°lise normal do campo
        resultado = self.analisar_campo(nome_campo, conteudo_atual, contexto_anterior)
        
        # Adicionar contexto TRT-2
        if "erro" not in resultado:
            resultado["secao_trt2"] = mapeamento["secao_trt2"]
            resultado["criterios_obrigatorios"] = mapeamento["criterios_obrigatorios"]
            resultado["conformidade_manual"] = self._avaliar_conformidade_manual(
                conteudo_atual, mapeamento["criterios_obrigatorios"]
            )
        
        return resultado
    
    def _avaliar_conformidade_manual(self, conteudo: str, criterios: list) -> bool:
        """
        Avalia se o conte√∫do est√° conforme com os crit√©rios do Manual TRT-2.
        """
        if not conteudo or len(conteudo.strip()) < 50:
            return False
        
        # Verifica√ß√µes b√°sicas de conformidade
        conformidade_basica = [
            len(conteudo.strip()) >= 100,  # Conte√∫do m√≠nimo
            not any(palavra in conteudo.lower() for palavra in ['bullet', '‚Ä¢', '-']),  # Sem bullets
            any(palavra in conteudo.lower() for palavra in ['t√©cnico', 'an√°lise', 'conformidade']),  # Linguagem t√©cnica
        ]
        
        return sum(conformidade_basica) >= 2  # Pelo menos 2 de 3 crit√©rios
    
    def validar_alinhamento_prompt_tecnico(self, dados_etp: Dict[str, Any]) -> Dict[str, Any]:
        """
        Valida se os dados est√£o alinhados com a estrutura do novo prompt t√©cnico.
        """
        validacoes = []
        
        # Verificar campos obrigat√≥rios para cada se√ß√£o TRT-2
        secoes_obrigatorias = {
            "1. DESCRI√á√ÉO DA NECESSIDADE": dados_etp.get('descricao_problema'),
            "3. SOLU√á√ïES EXISTENTES NO MERCADO": dados_etp.get('solucoes_mercado'),
            "7. DEFINI√á√ÉO DO OBJETO": dados_etp.get('solucao_proposta'),
            "8. JUSTIFICATIVA DE ESCOLHA": dados_etp.get('justificativa_escolha'),
            "14. ESTRAT√âGIA DE IMPLANTA√á√ÉO": dados_etp.get('estrategia_implantacao'),
            "15. BENEF√çCIOS ESPERADOS": dados_etp.get('beneficios')
        }
        
        for secao, conteudo in secoes_obrigatorias.items():
            if not conteudo or not conteudo.strip():
                validacoes.append(f"‚ö†Ô∏è Se√ß√£o '{secao}' n√£o preenchida adequadamente")
            elif len(conteudo.strip()) < 50:
                validacoes.append(f"‚ö†Ô∏è Se√ß√£o '{secao}' precisa de mais detalhamento")
        
        # Verificar coer√™ncia entre se√ß√µes
        coerencia = self._verificar_coerencia_secoes(dados_etp)
        validacoes.extend(coerencia)
        
        return {
            "validacoes": validacoes,
            "status": "aprovado" if len(validacoes) == 0 else "requer_ajustes",
            "conformidade_trt2": len(validacoes) == 0,
            "timestamp": datetime.now().isoformat()
        }
    
    def _verificar_coerencia_secoes(self, dados_etp: Dict[str, Any]) -> list:
        """
        Verifica coer√™ncia entre as se√ß√µes do ETP.
        """
        inconsistencias = []
        
        # Verificar se solu√ß√£o proposta est√° alinhada com problema identificado
        problema = dados_etp.get('descricao_problema', '').lower()
        solucao = dados_etp.get('solucao_proposta', '').lower()
        
        if problema and solucao:
            # Verifica√ß√£o b√°sica de alinhamento (pode ser melhorada com NLP)
            palavras_problema = set(problema.split())
            palavras_solucao = set(solucao.split())
            intersecao = len(palavras_problema.intersection(palavras_solucao))
            
            if intersecao < 3:  # Muito pouca sobreposi√ß√£o
                inconsistencias.append("‚ö†Ô∏è Solu√ß√£o proposta pode n√£o estar alinhada com problema identificado")
        
        # Verificar se justificativa est√° coerente com an√°lise de mercado
        mercado = dados_etp.get('solucoes_mercado', '').lower()
        justificativa = dados_etp.get('justificativa_escolha', '').lower()
        
        if mercado and justificativa:
            if 'comparativo' in mercado and 'vantagem' not in justificativa:
                inconsistencias.append("‚ö†Ô∏è Justificativa deveria mencionar vantagens identificadas na an√°lise de mercado")
        
        return inconsistencias


# Fun√ß√µes auxiliares para integra√ß√£o com Streamlit
def criar_assistente_etp(provider: str = "openai") -> AssistenteEtpInteligente:
    """Cria uma inst√¢ncia do assistente ETP."""
    return AssistenteEtpInteligente(provider=provider)


def exibir_feedback_campo(feedback_resultado: Dict[str, Any]) -> None:
    """
    Exibe o feedback de um campo no Streamlit de forma estruturada.
    
    Args:
        feedback_resultado (Dict): Resultado da an√°lise do campo
    """
    if "erro" in feedback_resultado:
        st.error(f"‚ùå {feedback_resultado['erro']}")
        return
    
    # Indicador de qualidade
    qualidade = feedback_resultado.get("qualidade", "regular")
    cores_qualidade = {
        "excelente": "üü¢",
        "boa": "üü°",
        "regular": "üü†",
        "precisa_melhorar": "üî¥",
        "erro": "‚ùå"
    }
    
    st.markdown(f"### {cores_qualidade.get(qualidade, 'üü°')} An√°lise do Campo")
    
    # Pontos positivos
    if feedback_resultado.get("pontos_positivos"):
        with st.expander("‚úÖ Pontos Positivos", expanded=True):
            st.markdown(feedback_resultado["pontos_positivos"])
    
    # Pontos de aten√ß√£o
    if feedback_resultado.get("pontos_atencao"):
        with st.expander("‚ö†Ô∏è Pontos de Aten√ß√£o", expanded=True):
            st.warning(feedback_resultado["pontos_atencao"])
    
    # Sugest√µes de melhoria
    if feedback_resultado.get("sugestoes"):
        with st.expander("üìù Sugest√µes de Melhoria", expanded=True):
            st.info(feedback_resultado["sugestoes"])
    
    # Exemplo melhorado
    if feedback_resultado.get("exemplo_melhorado"):
        with st.expander("üí° Exemplo Melhorado", expanded=False):
            st.code(feedback_resultado["exemplo_melhorado"], language="text")


def criar_botao_ajuda_campo(nome_campo: str, conteudo_atual: str, contexto_anterior: Dict[str, Any],
                           assistente: AssistenteEtpInteligente) -> None:
    """
    Cria um bot√£o de ajuda para um campo espec√≠fico.
    
    Args:
        nome_campo (str): Nome do campo
        conteudo_atual (str): Conte√∫do atual do campo
        contexto_anterior (Dict): Contexto dos campos anteriores
        assistente (AssistenteEtpInteligente): Inst√¢ncia do assistente
    """
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        if st.button(f"ü§ñ Analisar {nome_campo}", key=f"analisar_{nome_campo}"):
            if conteudo_atual.strip():
                with st.spinner("Analisando campo..."):
                    resultado = assistente.analisar_campo(nome_campo, conteudo_atual, contexto_anterior)
                    exibir_feedback_campo(resultado)
            else:
                st.warning("‚ö†Ô∏è Preencha o campo antes de solicitar an√°lise.")
    
    with col2:
        if st.button(f"üìù Melhorar Texto", key=f"melhorar_{nome_campo}"):
            if conteudo_atual.strip():
                with st.spinner("Melhorando texto..."):
                    resultado = assistente.melhorar_texto(conteudo_atual, "geral")
                    if "erro" not in resultado:
                        st.success("‚úÖ Texto melhorado!")
                        st.markdown("**Texto Melhorado:**")
                        st.text_area("Texto melhorado", value=resultado["texto_melhorado"],
                                   key=f"melhorado_{nome_campo}", height=150, label_visibility="collapsed")
                        st.markdown("**Melhorias Realizadas:**")
                        st.info(resultado["melhorias_realizadas"])
                    else:
                        st.error(resultado["erro"])
            else:
                st.warning("‚ö†Ô∏è Preencha o campo antes de solicitar melhoria.")
    
    with col3:
        if st.button(f"üí° Ver Exemplo", key=f"exemplo_{nome_campo}"):
            with st.spinner("Gerando exemplo..."):
                exemplo = assistente.gerar_exemplo_campo(nome_campo, contexto_anterior)
                st.markdown("**Exemplo de Preenchimento:**")
                st.text_area("Exemplo de preenchimento", value=exemplo, key=f"exemplo_texto_{nome_campo}", height=150, label_visibility="collapsed")


def criar_botao_ajuda_campo_trt2(assistente: AssistenteEtpInteligente, nome_campo: str,
                                conteudo_atual: str, contexto_anterior: Dict[str, Any],
                                feedback_key: str) -> Dict[str, Any]:
    """
    Cria bot√µes de ajuda para um campo espec√≠fico com integra√ß√£o TRT-2.
    
    Args:
        assistente (AssistenteEtpInteligente): Inst√¢ncia do assistente
        nome_campo (str): Nome do campo
        conteudo_atual (str): Conte√∫do atual do campo
        contexto_anterior (Dict): Contexto dos campos anteriores
        feedback_key (str): Chave para armazenar feedback
        
    Returns:
        Dict: Resultado da an√°lise se executada
    """
    col1, col2, col3 = st.columns([1, 1, 1])
    
    feedback_resultado = None
    
    with col1:
        if st.button(f"ü§ñ Analisar", key=f"analisar_trt2_{feedback_key}"):
            if conteudo_atual.strip():
                with st.spinner("Analisando campo com contexto TRT-2..."):
                    # Usar m√©todo integrado com TRT-2
                    feedback_resultado = assistente.analisar_campo_com_contexto_trt2(
                        nome_campo, conteudo_atual, contexto_anterior
                    )
                    return feedback_resultado
            else:
                st.warning("‚ö†Ô∏è Preencha o campo antes de solicitar an√°lise.")
    
    with col2:
        if st.button(f"üìù Melhorar", key=f"melhorar_trt2_{feedback_key}"):
            if conteudo_atual.strip():
                with st.spinner("Melhorando texto..."):
                    resultado = assistente.melhorar_texto(conteudo_atual, "tecnico")
                    if "erro" not in resultado:
                        st.success("‚úÖ Texto melhorado!")
                        st.markdown("**Texto Melhorado:**")
                        st.text_area("Texto melhorado TRT-2", value=resultado["texto_melhorado"],
                                   key=f"melhorado_trt2_{feedback_key}", height=150, label_visibility="collapsed")
                        st.markdown("**Melhorias Realizadas:**")
                        st.info(resultado["melhorias_realizadas"])
                    else:
                        st.error(resultado["erro"])
            else:
                st.warning("‚ö†Ô∏è Preencha o campo antes de solicitar melhoria.")
    
    with col3:
        if st.button(f"üí° Exemplo", key=f"exemplo_trt2_{feedback_key}"):
            with st.spinner("Gerando exemplo..."):
                exemplo = assistente.gerar_exemplo_campo(nome_campo, contexto_anterior)
                st.markdown("**Exemplo de Preenchimento:**")
                st.text_area("Exemplo TRT-2", value=exemplo, key=f"exemplo_texto_trt2_{feedback_key}", height=150, label_visibility="collapsed")
    
    return feedback_resultado


def exibir_feedback_campo_trt2(feedback_resultado: Dict[str, Any]) -> None:
    """
    Exibe feedback de campo com informa√ß√µes do Manual TRT-2.
    """
    if "erro" in feedback_resultado:
        st.error(f"‚ùå {feedback_resultado['erro']}")
        return
    
    # Indicador de qualidade + conformidade TRT-2
    qualidade = feedback_resultado.get("qualidade", "regular")
    conformidade = feedback_resultado.get("conformidade_manual", False)
    
    cores_qualidade = {
        "excelente": "üü¢",
        "boa": "üü°",
        "regular": "üü†",
        "precisa_melhorar": "üî¥",
        "erro": "‚ùå"
    }
    
    # T√≠tulo com indicadores
    titulo = f"### {cores_qualidade.get(qualidade, 'üü°')} An√°lise do Campo"
    if conformidade:
        titulo += " ‚úÖ Conforme TRT-2"
    else:
        titulo += " ‚ö†Ô∏è Requer Adequa√ß√£o TRT-2"
    
    st.markdown(titulo)
    
    # Se√ß√£o TRT-2 correspondente
    if feedback_resultado.get("secao_trt2"):
        st.info(f"üìã **Se√ß√£o Manual TRT-2:** {feedback_resultado['secao_trt2']}")
    
    # Crit√©rios obrigat√≥rios
    if feedback_resultado.get("criterios_obrigatorios"):
        with st.expander("üìã Crit√©rios Obrigat√≥rios (Manual TRT-2)", expanded=False):
            for criterio in feedback_resultado["criterios_obrigatorios"]:
                st.markdown(f"‚Ä¢ {criterio}")
    
    # Pontos positivos
    if feedback_resultado.get("pontos_positivos"):
        with st.expander("‚úÖ Pontos Positivos", expanded=True):
            st.markdown(feedback_resultado["pontos_positivos"])
    
    # Pontos de aten√ß√£o
    if feedback_resultado.get("pontos_atencao"):
        with st.expander("‚ö†Ô∏è Pontos de Aten√ß√£o", expanded=True):
            st.warning(feedback_resultado["pontos_atencao"])
    
    # Sugest√µes de melhoria
    if feedback_resultado.get("sugestoes"):
        with st.expander("üìù Sugest√µes de Melhoria", expanded=True):
            st.info(feedback_resultado["sugestoes"])
    
    # Exemplo melhorado
    if feedback_resultado.get("exemplo_melhorado"):
        with st.expander("üí° Exemplo Melhorado", expanded=False):
            st.code(feedback_resultado["exemplo_melhorado"], language="text")


def criar_validacao_completa_trt2(dados_etp: Dict[str, Any], assistente: AssistenteEtpInteligente) -> None:
    """
    Cria interface para valida√ß√£o completa contra Manual TRT-2.
    """
    st.markdown("---")
    st.markdown("### üèõÔ∏è Valida√ß√£o Manual TRT-2")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìã Validar Conformidade TRT-2", help="Verifica conformidade com todas as se√ß√µes obrigat√≥rias"):
            with st.spinner("Validando conformidade com Manual TRT-2..."):
                validacao = assistente.validar_alinhamento_prompt_tecnico(dados_etp)
                
                if validacao["status"] == "aprovado":
                    st.success("‚úÖ ETP conforme com Manual TRT-2!")
                else:
                    st.warning("‚ö†Ô∏è ETP requer ajustes para conformidade:")
                    for validacao_item in validacao["validacoes"]:
                        st.markdown(f"‚Ä¢ {validacao_item}")
    
    with col2:
        if st.button("üîç An√°lise Detalhada TRT-2", help="An√°lise detalhada de cada se√ß√£o"):
            st.info("Funcionalidade em desenvolvimento - an√°lise se√ß√£o por se√ß√£o")


class EtpLlmGenerator:
    """Gerador de Estudos T√©cnicos Preliminares (ETP) usando LangChain."""

    def __init__(self, provider: str = "openai"):
        """
        Inicializa o gerador de ETP com um provedor LLM espec√≠fico.

        Args:
            provider (str): O provedor LLM a ser usado ('openai' ou 'anthropic')
        """
        self.provider = provider.lower()
        self.llm = self._get_llm()

        # Criar o template de prompt para o ETP
        self.prompt_template = ChatPromptTemplate.from_messages([
            ("system", "Voc√™ √© um especialista em elabora√ß√£o de documentos t√©cnicos para contrata√ß√µes governamentais, "
             "especialmente Estudos T√©cnicos Preliminares (ETP). Seu objetivo √© criar documentos claros, "
             "objetivos e em conformidade com a legisla√ß√£o brasileira."),
            ("user", "{prompt}")
        ])

        # Configurar a cadeia de processamento
        self.chain = (
            {"prompt": RunnablePassthrough()}
            | self.prompt_template
            | self.llm
            | StrOutputParser()
        )

    def _get_llm(self):
        """Configura e retorna o modelo LLM com base no provedor."""
        if self.provider == "openai":
            api_key = os.environ.get("OPENAI_API_KEY", st.secrets.get("OPENAI_API_KEY"))
            if not api_key:
                st.warning("Chave de API da OpenAI n√£o configurada.")
                return None
            return ChatOpenAI(model="gpt-4o-mini", temperature=0.7, api_key=api_key, max_tokens=8000)

        elif self.provider == "anthropic":
            api_key = os.environ.get("ANTHROPIC_API_KEY", st.secrets.get("ANTHROPIC_API_KEY"))
            if not api_key:
                st.warning("Chave de API da Anthropic n√£o configurada.")
                return None
            return ChatAnthropic(model="claude-3-opus-20240229", temperature=0.7, api_key=api_key, max_tokens=8000)

        else:
            raise ValueError(f"Provedor LLM n√£o suportado: {self.provider}.")

    def _construct_prompt(self, dados_etp: Dict[str, Any]) -> str:
        """Constr√≥i prompt t√©cnico conforme Manual TRT-2 e Lei 14.133/2021."""
        return self._construct_prompt_tecnico_trt2(dados_etp)
    
    def _construct_prompt_tecnico_trt2(self, dados_etp: Dict[str, Any]) -> str:
        """Constr√≥i prompt t√©cnico conforme Manual TRT-2 e Lei 14.133/2021."""
        
        # Formatar valores monet√°rios
        valor_min = f"R$ {dados_etp['valor_minimo']:,.2f}".replace(",", "X").replace(
            ".", ",").replace("X", ".") if dados_etp['valor_minimo'] else "N√£o informado"
        valor_med = f"R$ {dados_etp['valor_medio']:,.2f}".replace(",", "X").replace(
            ".", ",").replace("X", ".") if dados_etp['valor_medio'] else "N√£o informado"
        valor_max = f"R$ {dados_etp['valor_maximo']:,.2f}".replace(",", "X").replace(
            ".", ",").replace("X", ".") if dados_etp['valor_maximo'] else "N√£o informado"

        orgao_responsavel = dados_etp.get('orgao_responsavel', '√ìrg√£o P√∫blico')
        
        prompt_tecnico = f"""
Elabore um Estudo T√©cnico Preliminar (ETP) em conformidade com a Lei 14.133/2021 e melhores pr√°ticas de contrata√ß√µes p√∫blicas.

IMPORTANTE: O documento deve seguir RIGOROSAMENTE a estrutura t√©cnica formal de documentos governamentais, com linguagem jur√≠dico-administrativa adequada e fundamenta√ß√£o legal completa.

## DADOS FORNECIDOS PELO USU√ÅRIO:

**√ìRG√ÉO RESPONS√ÅVEL:**
- {orgao_responsavel}

**IDENTIFICA√á√ÉO DA NECESSIDADE:**
- Descri√ß√£o do problema: {dados_etp['descricao_problema']}
- √Åreas organizacionais impactadas: {', '.join(dados_etp['areas_impactadas'])}
- Partes interessadas (stakeholders): {', '.join(dados_etp['stakeholders'])}

**REQUISITOS T√âCNICOS:**
- Requisitos funcionais: {dados_etp['requisitos_funcionais']}
- Requisitos n√£o funcionais: {dados_etp['requisitos_nao_funcionais']}

**AN√ÅLISE DE MERCADO REALIZADA:**
- Solu√ß√µes identificadas no mercado: {dados_etp['solucoes_mercado']}
- An√°lise comparativa: {dados_etp['comparativo_solucoes']}
- Faixa de pre√ßos pesquisada: M√≠nimo {valor_min}, M√©dio {valor_med}, M√°ximo {valor_max}

**SOLU√á√ÉO T√âCNICA PROPOSTA:**
- Descri√ß√£o da solu√ß√£o escolhida: {dados_etp['solucao_proposta']}
- Fundamenta√ß√£o da escolha: {dados_etp['justificativa_escolha']}

**ESTRAT√âGIA DE IMPLEMENTA√á√ÉO:**
- Metodologia de implanta√ß√£o: {dados_etp['estrategia_implantacao']}
- Cronograma previsto: {dados_etp['cronograma']}
- Recursos organizacionais necess√°rios: {dados_etp['recursos_necessarios']}
- Provid√™ncias preparat√≥rias: {dados_etp['providencias']}

**AN√ÅLISE DE BENEF√çCIOS:**
- Benef√≠cios esperados: {dados_etp['beneficios']}
- Benefici√°rios identificados: {dados_etp['beneficiarios']}

**CONCLUS√ÉO T√âCNICA:**
- Declara√ß√£o de viabilidade: A contrata√ß√£o foi avaliada como {dados_etp['declaracao_viabilidade']}

## ESTRUTURA OBRIGAT√ìRIA DO ETP (Manual TRT-2):

Elabore o documento seguindo EXATAMENTE esta estrutura numerada:

**1. DESCRI√á√ÉO DA NECESSIDADE**
- Contextualiza√ß√£o do problema ou oportunidade identificada
- An√°lise de conformidade com Decreto 9.507/2018 (execu√ß√£o direta vs. terceiriza√ß√£o)
- Justificativa t√©cnica para a contrata√ß√£o
- Identifica√ß√£o de terceiriza√ß√£o l√≠cita/il√≠cita quando aplic√°vel

**2. HIST√ìRICO DE CONTRATA√á√ïES SIMILARES**
- Levantamento de contrata√ß√µes anteriores relacionadas
- Li√ß√µes aprendidas de contratos similares
- An√°lise de relat√≥rios de gest√£o contratuais anteriores
- Identifica√ß√£o de oportunidades de melhoria

**3. SOLU√á√ïES EXISTENTES NO MERCADO**
- Pesquisa abrangente de alternativas dispon√≠veis
- An√°lise comparativa t√©cnica e econ√¥mica
- Considera√ß√£o de execu√ß√£o direta pelo √≥rg√£o
- Vantagens e desvantagens de cada alternativa

**4. LEVANTAMENTO E AN√ÅLISE DE RISCOS**
- Elabora√ß√£o de Mapa de Riscos obrigat√≥rio
- Identifica√ß√£o de riscos de planejamento, sele√ß√£o e execu√ß√£o
- An√°lise de probabilidade e impacto
- Medidas de mitiga√ß√£o propostas

**5. CRIT√âRIOS DE SUSTENTABILIDADE**
- Conformidade com Guia de Contrata√ß√µes Sustent√°veis
- Identifica√ß√£o de impactos ambientais
- Medidas mitigadoras espec√≠ficas
- Requisitos de efici√™ncia energ√©tica e log√≠stica reversa

**6. ESTIMATIVA DO VALOR DA CONTRATA√á√ÉO**
- Metodologia de pesquisa conforme art. 23 da Lei 14.133/2021
- Fontes consultadas (Painel de Pre√ßos, SICAF, mercado)
- Custos totais considerados (aquisi√ß√£o + acess√≥rios + ciclo de vida)
- Mem√≥rias de c√°lculo detalhadas

**7. DEFINI√á√ÉO DO OBJETO**
- Descri√ß√£o t√©cnica precisa e completa
- Especifica√ß√µes t√©cnicas detalhadas
- Alinhamento com necessidade identificada
- Possibilidade de desdobramento em m√∫ltiplos Termos de Refer√™ncia

**8. JUSTIFICATIVA DE ESCOLHA DA SOLU√á√ÉO**
- Fundamenta√ß√£o t√©cnica, operacional e financeira
- Demonstra√ß√£o de vantajosidade para a Administra√ß√£o
- Compara√ß√£o com alternativas analisadas
- Alinhamento com interesse p√∫blico

**9. PREVIS√ÉO DE CONTRATA√á√ïES FUTURAS (PCA)**
- Inser√ß√£o no Plano de Contrata√ß√µes Anuais
- Cronograma de contrata√ß√µes relacionadas
- Interdepend√™ncias com outras aquisi√ß√µes
- Planejamento plurianual quando aplic√°vel

**10. ESTIMATIVA DE QUANTIDADES**
- Mem√≥rias de c√°lculo fundamentadas
- An√°lise de hist√≥rico de consumo
- Considera√ß√£o de economia de escala
- Previs√µes de demanda futura

**11. JUSTIFICATIVAS PARA PARCELAMENTO, AGRUPAMENTO E SUBCONTRATA√á√ÉO**
- An√°lise de viabilidade t√©cnica e econ√¥mica
- Conformidade com S√∫mula 247 do TCU
- Justificativa para divisibilidade ou indivisibilidade do objeto
- Considera√ß√µes sobre economia de escala

**12. DEPEND√äNCIA DO CONTRATADO**
- An√°lise de depend√™ncia tecnol√≥gica
- Medidas para evitar aprisionamento tecnol√≥gico
- Estrat√©gias de migra√ß√£o e portabilidade
- Garantias de continuidade dos servi√ßos

**13. TRANSI√á√ÉO CONTRATUAL**
- Planejamento da transi√ß√£o entre contratos
- Per√≠odo de sobreposi√ß√£o necess√°rio
- Transfer√™ncia de conhecimento e documenta√ß√£o
- Continuidade dos servi√ßos essenciais

**14. ESTRAT√âGIA DE IMPLANTA√á√ÉO**
- Metodologia de implementa√ß√£o detalhada
- Cronograma executivo com marcos principais
- Recursos humanos e materiais necess√°rios
- Plano de gest√£o de mudan√ßas

**15. BENEF√çCIOS ESPERADOS**
- Benef√≠cios quantitativos e qualitativos
- Indicadores de desempenho propostos
- Benefici√°rios diretos e indiretos
- Retorno sobre investimento esperado

**16. DECLARA√á√ÉO DE ADEQUA√á√ÉO OR√áAMENT√ÅRIA**
- Confirma√ß√£o de disponibilidade or√ßament√°ria
- Fonte de recursos identificada
- Compatibilidade com planejamento or√ßament√°rio
- Impacto nas metas fiscais

**17. APROVA√á√ÉO DA AUTORIDADE COMPETENTE**
- Identifica√ß√£o da autoridade competente
- Fundamenta√ß√£o da compet√™ncia decis√≥ria
- Espa√ßo para assinatura e data
- Refer√™ncia aos autos do processo administrativo

## DIRETRIZES DE ELABORA√á√ÉO:

1. **LINGUAGEM T√âCNICA FORMAL**: Utilize terminologia jur√≠dico-administrativa adequada
2. **FUNDAMENTA√á√ÉO LEGAL**: Cite base legal pertinente (Lei 14.133/2021, decretos, instru√ß√µes normativas)
3. **ESTRUTURA√á√ÉO PROFISSIONAL**: Numera√ß√£o sequencial, par√°grafos bem estruturados
4. **COMPLETUDE T√âCNICA**: Todas as 17 se√ß√µes devem ser desenvolvidas adequadamente
5. **CONFORMIDADE NORMATIVA**: Ader√™ncia total ao Manual TRT-2 e legisla√ß√£o vigente
6. **OBJETIVIDADE**: Linguagem clara, precisa e objetiva
7. **FUNDAMENTA√á√ÉO**: Todas as afirma√ß√µes devem ser tecnicamente fundamentadas

## OBSERVA√á√ïES IMPORTANTES:

- O documento deve ter entre 8-15 p√°ginas quando impresso
- Cada se√ß√£o deve ter desenvolvimento adequado (n√£o apenas t√≥picos)
- Incluir refer√™ncias normativas pertinentes
- Manter coer√™ncia t√©cnica entre todas as se√ß√µes
- Adequar linguagem ao padr√£o de documentos oficiais do Poder Judici√°rio

Elabore o ETP completo seguindo rigorosamente esta estrutura e diretrizes.
        """
        
        return prompt_tecnico

    def generate_etp(self, dados_etp: Dict[str, Any]) -> str:
        """Gera o ETP usando o LLM configurado com gera√ß√£o modular."""
        if not self.llm:
            return "Erro: LLM n√£o inicializado. Verifique as chaves de API."
        
        try:
            # Usar gera√ß√£o modular para garantir completude
            result = self.generate_etp_modular(dados_etp)
            return result
        except Exception as e:
            st.error(f"Erro ao gerar o ETP: {str(e)}")
            return f"Erro na gera√ß√£o do documento: {str(e)}"
    
    def generate_etp_modular(self, dados_etp: Dict[str, Any]) -> str:
        """Gera ETP em etapas para evitar truncamento."""
        
        # Dividir as 17 se√ß√µes em 3 grupos
        grupos_secoes = [
            [1, 2, 3, 4, 5, 6],      # Se√ß√µes 1-6
            [7, 8, 9, 10, 11, 12],   # Se√ß√µes 7-12
            [13, 14, 15, 16, 17]     # Se√ß√µes 13-17 (inclui cronograma)
        ]
        
        documento_completo = []
        
        for i, grupo in enumerate(grupos_secoes):
            st.info(f"Gerando se√ß√µes {grupo[0]}-{grupo[-1]}...")
            prompt_grupo = self._construct_prompt_grupo(dados_etp, grupo)
            resultado_grupo = self.chain.invoke({"prompt": prompt_grupo})
            documento_completo.append(resultado_grupo)
        
        # Juntar documento completo
        documento_final = "\n\n".join(documento_completo)
        
        # Validar completude
        validacao = self._validar_completude_etp(documento_final)
        if not validacao["completo"]:
            st.warning(f"‚ö†Ô∏è Algumas se√ß√µes podem estar incompletas: {', '.join(validacao['secoes_ausentes'])}")
            st.info(f"üìä Completude: {validacao['percentual_completude']:.1f}%")
        else:
            st.success("‚úÖ Todas as 17 se√ß√µes foram geradas com sucesso!")
        
        return documento_final
    
    def _construct_prompt_grupo(self, dados_etp: Dict[str, Any], secoes: list) -> str:
        """Constr√≥i prompt para um grupo espec√≠fico de se√ß√µes."""
        
        # Formatar valores monet√°rios
        valor_min = f"R$ {dados_etp['valor_minimo']:,.2f}".replace(",", "X").replace(
            ".", ",").replace("X", ".") if dados_etp['valor_minimo'] else "N√£o informado"
        valor_med = f"R$ {dados_etp['valor_medio']:,.2f}".replace(",", "X").replace(
            ".", ",").replace("X", ".") if dados_etp['valor_medio'] else "N√£o informado"
        valor_max = f"R$ {dados_etp['valor_maximo']:,.2f}".replace(",", "X").replace(
            ".", ",").replace("X", ".") if dados_etp['valor_maximo'] else "N√£o informado"

        orgao_responsavel = dados_etp.get('orgao_responsavel', '√ìrg√£o P√∫blico')
        
        # Definir se√ß√µes por grupo
        secoes_definicoes = {
            1: "**1. DESCRI√á√ÉO DA NECESSIDADE**\n- Contextualiza√ß√£o do problema ou oportunidade identificada\n- An√°lise de conformidade com Decreto 9.507/2018 (execu√ß√£o direta vs. terceiriza√ß√£o)\n- Justificativa t√©cnica para a contrata√ß√£o\n- Identifica√ß√£o de terceiriza√ß√£o l√≠cita/il√≠cita quando aplic√°vel",
            2: "**2. HIST√ìRICO DE CONTRATA√á√ïES SIMILARES**\n- Levantamento de contrata√ß√µes anteriores relacionadas\n- Li√ß√µes aprendidas de contratos similares\n- An√°lise de relat√≥rios de gest√£o contratuais anteriores\n- Identifica√ß√£o de oportunidades de melhoria",
            3: "**3. SOLU√á√ïES EXISTENTES NO MERCADO**\n- Pesquisa abrangente de alternativas dispon√≠veis\n- An√°lise comparativa t√©cnica e econ√¥mica\n- Considera√ß√£o de execu√ß√£o direta pelo √≥rg√£o\n- Vantagens e desvantagens de cada alternativa",
            4: "**4. LEVANTAMENTO E AN√ÅLISE DE RISCOS**\n- Elabora√ß√£o de Mapa de Riscos obrigat√≥rio\n- Identifica√ß√£o de riscos de planejamento, sele√ß√£o e execu√ß√£o\n- An√°lise de probabilidade e impacto\n- Medidas de mitiga√ß√£o propostas",
            5: "**5. CRIT√âRIOS DE SUSTENTABILIDADE**\n- Conformidade com Guia de Contrata√ß√µes Sustent√°veis\n- Identifica√ß√£o de impactos ambientais\n- Medidas mitigadoras espec√≠ficas\n- Requisitos de efici√™ncia energ√©tica e log√≠stica reversa",
            6: "**6. ESTIMATIVA DO VALOR DA CONTRATA√á√ÉO**\n- Metodologia de pesquisa conforme art. 23 da Lei 14.133/2021\n- Fontes consultadas (Painel de Pre√ßos, SICAF, mercado)\n- Custos totais considerados (aquisi√ß√£o + acess√≥rios + ciclo de vida)\n- Mem√≥rias de c√°lculo detalhadas",
            7: "**7. DEFINI√á√ÉO DO OBJETO**\n- Descri√ß√£o t√©cnica precisa e completa\n- Especifica√ß√µes t√©cnicas detalhadas\n- Alinhamento com necessidade identificada\n- Possibilidade de desdobramento em m√∫ltiplos Termos de Refer√™ncia",
            8: "**8. JUSTIFICATIVA DE ESCOLHA DA SOLU√á√ÉO**\n- Fundamenta√ß√£o t√©cnica, operacional e financeira\n- Demonstra√ß√£o de vantajosidade para a Administra√ß√£o\n- Compara√ß√£o com alternativas analisadas\n- Alinhamento com interesse p√∫blico",
            9: "**9. PREVIS√ÉO DE CONTRATA√á√ïES FUTURAS (PCA)**\n- Inser√ß√£o no Plano de Contrata√ß√µes Anuais\n- Cronograma de contrata√ß√µes relacionadas\n- Interdepend√™ncias com outras aquisi√ß√µes\n- Planejamento plurianual quando aplic√°vel",
            10: "**10. ESTIMATIVA DE QUANTIDADES**\n- Mem√≥rias de c√°lculo fundamentadas\n- An√°lise de hist√≥rico de consumo\n- Considera√ß√£o de economia de escala\n- Previs√µes de demanda futura",
            11: "**11. JUSTIFICATIVAS PARA PARCELAMENTO, AGRUPAMENTO E SUBCONTRATA√á√ÉO**\n- An√°lise de viabilidade t√©cnica e econ√¥mica\n- Conformidade com S√∫mula 247 do TCU\n- Justificativa para divisibilidade ou indivisibilidade do objeto\n- Considera√ß√µes sobre economia de escala",
            12: "**12. DEPEND√äNCIA DO CONTRATADO**\n- An√°lise de depend√™ncia tecnol√≥gica\n- Medidas para evitar aprisionamento tecnol√≥gico\n- Estrat√©gias de migra√ß√£o e portabilidade\n- Garantias de continuidade dos servi√ßos",
            13: "**13. TRANSI√á√ÉO CONTRATUAL**\n- Planejamento da transi√ß√£o entre contratos\n- Per√≠odo de sobreposi√ß√£o necess√°rio\n- Transfer√™ncia de conhecimento e documenta√ß√£o\n- Continuidade dos servi√ßos essenciais",
            14: "**14. ESTRAT√âGIA DE IMPLANTA√á√ÉO**\n- Metodologia de implementa√ß√£o detalhada\n- Cronograma executivo com marcos principais\n- Recursos humanos e materiais necess√°rios\n- Plano de gest√£o de mudan√ßas",
            15: "**15. BENEF√çCIOS ESPERADOS**\n- Benef√≠cios quantitativos e qualitativos\n- Indicadores de desempenho propostos\n- Benefici√°rios diretos e indiretos\n- Retorno sobre investimento esperado",
            16: "**16. DECLARA√á√ÉO DE ADEQUA√á√ÉO OR√áAMENT√ÅRIA**\n- Confirma√ß√£o de disponibilidade or√ßament√°ria\n- Fonte de recursos identificada\n- Compatibilidade com planejamento or√ßament√°rio\n- Impacto nas metas fiscais",
            17: "**17. APROVA√á√ÉO DA AUTORIDADE COMPETENTE**\n- Identifica√ß√£o da autoridade competente\n- Fundamenta√ß√£o da compet√™ncia decis√≥ria\n- Espa√ßo para assinatura e data\n- Refer√™ncia aos autos do processo administrativo"
        }
        
        # Construir se√ß√µes para este grupo
        secoes_grupo = []
        for secao_num in secoes:
            secoes_grupo.append(secoes_definicoes[secao_num])
        
        secoes_texto = "\n\n".join(secoes_grupo)
        
        prompt_grupo = f"""
Elabore as se√ß√µes {secoes[0]} a {secoes[-1]} de um Estudo T√©cnico Preliminar (ETP) em conformidade com a Lei 14.133/2021.

IMPORTANTE: Desenvolva COMPLETAMENTE cada se√ß√£o solicitada com conte√∫do t√©cnico adequado e linguagem jur√≠dico-administrativa formal.

## DADOS FORNECIDOS PELO USU√ÅRIO:

**√ìRG√ÉO RESPONS√ÅVEL:** {orgao_responsavel}

**IDENTIFICA√á√ÉO DA NECESSIDADE:**
- Descri√ß√£o do problema: {dados_etp['descricao_problema']}
- √Åreas organizacionais impactadas: {', '.join(dados_etp['areas_impactadas'])}
- Partes interessadas (stakeholders): {', '.join(dados_etp['stakeholders'])}

**REQUISITOS T√âCNICOS:**
- Requisitos funcionais: {dados_etp['requisitos_funcionais']}
- Requisitos n√£o funcionais: {dados_etp['requisitos_nao_funcionais']}

**AN√ÅLISE DE MERCADO REALIZADA:**
- Solu√ß√µes identificadas no mercado: {dados_etp['solucoes_mercado']}
- An√°lise comparativa: {dados_etp['comparativo_solucoes']}
- Faixa de pre√ßos pesquisada: M√≠nimo {valor_min}, M√©dio {valor_med}, M√°ximo {valor_max}

**SOLU√á√ÉO T√âCNICA PROPOSTA:**
- Descri√ß√£o da solu√ß√£o escolhida: {dados_etp['solucao_proposta']}
- Fundamenta√ß√£o da escolha: {dados_etp['justificativa_escolha']}

**ESTRAT√âGIA DE IMPLEMENTA√á√ÉO:**
- Metodologia de implanta√ß√£o: {dados_etp['estrategia_implantacao']}
- Cronograma previsto: {dados_etp['cronograma']}
- Recursos organizacionais necess√°rios: {dados_etp['recursos_necessarios']}
- Provid√™ncias preparat√≥rias: {dados_etp['providencias']}

**AN√ÅLISE DE BENEF√çCIOS:**
- Benef√≠cios esperados: {dados_etp['beneficios']}
- Benefici√°rios identificados: {dados_etp['beneficiarios']}

**CONCLUS√ÉO T√âCNICA:**
- Declara√ß√£o de viabilidade: A contrata√ß√£o foi avaliada como {dados_etp['declaracao_viabilidade']}

## SE√á√ïES A DESENVOLVER:

{secoes_texto}

## DIRETRIZES:

1. **LINGUAGEM T√âCNICA FORMAL**: Utilize terminologia jur√≠dico-administrativa adequada
2. **FUNDAMENTA√á√ÉO LEGAL**: Cite base legal pertinente (Lei 14.133/2021, decretos, instru√ß√µes normativas)
3. **ESTRUTURA√á√ÉO PROFISSIONAL**: Numera√ß√£o sequencial, par√°grafos bem estruturados
4. **COMPLETUDE T√âCNICA**: Cada se√ß√£o deve ser desenvolvida adequadamente (n√£o apenas t√≥picos)
5. **CONFORMIDADE NORMATIVA**: Ader√™ncia total ao Manual TRT-2 e legisla√ß√£o vigente

IMPORTANTE: Para a se√ß√£o 14 (ESTRAT√âGIA DE IMPLANTA√á√ÉO), inclua OBRIGATORIAMENTE o cronograma detalhado baseado nas informa√ß√µes fornecidas pelo usu√°rio.

Desenvolva APENAS as se√ß√µes solicitadas ({secoes[0]} a {secoes[-1]}) com conte√∫do completo e t√©cnico.
        """
        
        return prompt_grupo
    
    def _validar_completude_etp(self, documento_gerado: str) -> Dict[str, Any]:
        """Valida se todas as se√ß√µes foram geradas."""
        
        secoes_obrigatorias = [
            "1. DESCRI√á√ÉO DA NECESSIDADE",
            "2. HIST√ìRICO DE CONTRATA√á√ïES",
            "3. SOLU√á√ïES EXISTENTES NO MERCADO",
            "4. LEVANTAMENTO E AN√ÅLISE DE RISCOS",
            "5. CRIT√âRIOS DE SUSTENTABILIDADE",
            "6. ESTIMATIVA DO VALOR",
            "7. DEFINI√á√ÉO DO OBJETO",
            "8. JUSTIFICATIVA DE ESCOLHA",
            "9. PREVIS√ÉO DE CONTRATA√á√ïES FUTURAS",
            "10. ESTIMATIVA DE QUANTIDADES",
            "11. JUSTIFICATIVAS PARA PARCELAMENTO",
            "12. DEPEND√äNCIA DO CONTRATADO",
            "13. TRANSI√á√ÉO CONTRATUAL",
            "14. ESTRAT√âGIA DE IMPLANTA√á√ÉO",  # ‚Üê Cronograma aqui
            "15. BENEF√çCIOS ESPERADOS",
            "16. DECLARA√á√ÉO DE ADEQUA√á√ÉO OR√áAMENT√ÅRIA",
            "17. APROVA√á√ÉO DA AUTORIDADE COMPETENTE"
        ]
        
        secoes_ausentes = []
        for secao in secoes_obrigatorias:
            # Verificar se a se√ß√£o est√° presente (busca flex√≠vel)
            secao_numero = secao.split('.')[0]
            if not any(f"{secao_numero}." in linha for linha in documento_gerado.split('\n')):
                secoes_ausentes.append(secao)
        
        return {
            "completo": len(secoes_ausentes) == 0,
            "secoes_ausentes": secoes_ausentes,
            "percentual_completude": ((17 - len(secoes_ausentes)) / 17) * 100,
            "total_secoes": 17,
            "secoes_encontradas": 17 - len(secoes_ausentes)
        }


class RagChain:
    """Cadeia de RAG para responder perguntas sobre a Lei 14.133."""

    def __init__(self, retriever, provider: str = "openai"):
        """
        Inicializa a cadeia de RAG.

        Args:
            retriever: O retriever configurado para buscar documentos.
            provider (str): O provedor LLM a ser usado.
        """
        self.retriever = retriever
        self.provider = provider.lower()
        self.llm = self._get_llm()
        self.chain = self._create_rag_chain()

    def _get_llm(self):
        """Configura e retorna o modelo LLM com base no provedor."""
        # Reutiliza a l√≥gica da classe EtpLlmGenerator
        generator = EtpLlmGenerator(provider=self.provider)
        return generator.llm

    def _create_rag_chain(self):
        """Cria a cadeia de RAG completa."""
        if not self.llm:
            return None

        template = """
        Voc√™ √© um assistente especialista em licita√ß√µes e contratos p√∫blicos, com profundo conhecimento da Lei 14.133/2021 e de manuais de boas pr√°ticas.
        Sua tarefa √© fornecer orienta√ß√µes claras e pr√°ticas para os usu√°rios, baseando-se no contexto fornecido e mantendo a continuidade da conversa.

        Contexto dos Documentos:
        {context}

        Hist√≥rico da Conversa:
        {chat_history}

        Pergunta Atual:
        {question}

        Instru√ß√µes:
        1.  **Mantenha a Continuidade:** Considere todo o hist√≥rico da conversa para fornecer respostas coerentes e contextualizadas.
        2.  **Seja um Orientador:** Sintetize os pontos relevantes do contexto para fornecer recomenda√ß√µes pr√°ticas.
        3.  **Fundamente sua Resposta:** Baseie suas orienta√ß√µes nas informa√ß√µes do contexto e cite fontes quando poss√≠vel.
        4.  **Seja Pr√°tico:** Traduza a linguagem t√©cnica para orienta√ß√µes aplic√°veis no dia a dia.
        5.  **Estruture a Resposta:** Organize de forma l√≥gica para facilitar o entendimento.
        6.  **Refer√™ncias Contextuais:** Quando apropriado, fa√ßa refer√™ncia a pontos discutidos anteriormente na conversa.
        """
        
        prompt = ChatPromptTemplate.from_template(template)

        rag_chain = (
            {"context": self.retriever, "question": RunnablePassthrough()}
            | prompt
            | self.llm
            | StrOutputParser()
        )
        return rag_chain

    def _format_chat_history(self, chat_history: list) -> str:
        """
        Formata o hist√≥rico de chat para inclus√£o no prompt.
        
        Args:
            chat_history (list): Lista de mensagens no formato:
                               [{"role": "user", "content": "..."},
                                {"role": "assistant", "content": "..."}]
            
        Returns:
            str: Hist√≥rico formatado
        """
        if not chat_history:
            return "Nenhuma conversa anterior."
        
        # Pegar apenas as √∫ltimas 6 mensagens para n√£o sobrecarregar o prompt
        recent_history = chat_history[-6:] if len(chat_history) > 6 else chat_history
        
        formatted_history = []
        for message in recent_history:
            role = "Usu√°rio" if message["role"] == "user" else "Assistente"
            content = message["content"][:200] + "..." if len(message["content"]) > 200 else message["content"]
            formatted_history.append(f"{role}: {content}")
        
        return "\n".join(formatted_history)

    def invoke_with_history(self, question: str, chat_history: list) -> str:
        """
        Invoca a cadeia de RAG com hist√≥rico de conversa.
        
        Args:
            question (str): A pergunta atual do usu√°rio
            chat_history (list): Lista de mensagens anteriores no formato:
                               [{"role": "user", "content": "..."},
                                {"role": "assistant", "content": "..."}]
        
        Returns:
            str: A resposta gerada pela IA considerando o contexto
        """
        if not self.chain:
            return "Erro: A cadeia de RAG n√£o foi inicializada corretamente. Verifique as configura√ß√µes da API."
        
        # Formatar o hist√≥rico da conversa
        formatted_history = self._format_chat_history(chat_history)
        
        # Criar uma nova cadeia que inclui o hist√≥rico
        template = """
        Voc√™ √© um assistente especialista em licita√ß√µes e contratos p√∫blicos, com profundo conhecimento da Lei 14.133/2021 e de manuais de boas pr√°ticas.
        Sua tarefa √© fornecer orienta√ß√µes claras e pr√°ticas para os usu√°rios, baseando-se no contexto fornecido e mantendo a continuidade da conversa.

        Contexto dos Documentos:
        {context}

        Hist√≥rico da Conversa:
        {chat_history}

        Pergunta Atual:
        {question}

        Instru√ß√µes:
        1.  **Mantenha a Continuidade:** Considere todo o hist√≥rico da conversa para fornecer respostas coerentes e contextualizadas.
        2.  **Seja um Orientador:** Sintetize os pontos relevantes do contexto para fornecer recomenda√ß√µes pr√°ticas.
        3.  **Fundamente sua Resposta:** Baseie suas orienta√ß√µes nas informa√ß√µes do contexto e cite fontes quando poss√≠vel.
        4.  **Seja Pr√°tico:** Traduza a linguagem t√©cnica para orienta√ß√µes aplic√°veis no dia a dia.
        5.  **Estruture a Resposta:** Organize de forma l√≥gica para facilitar o entendimento.
        6.  **Refer√™ncias Contextuais:** Quando apropriado, fa√ßa refer√™ncia a pontos discutidos anteriormente na conversa.
        """
        
        prompt = ChatPromptTemplate.from_template(template)
        
        chain_with_history = (
            {"context": self.retriever, "chat_history": lambda x: formatted_history, "question": RunnablePassthrough()}
            | prompt
            | self.llm
            | StrOutputParser()
        )
        
        return chain_with_history.invoke(question)

    def invoke(self, question: str) -> str:
        """
        Invoca a cadeia de RAG para obter uma resposta (sem hist√≥rico).

        Args:
            question (str): A pergunta do usu√°rio.

        Returns:
            str: A resposta gerada pela IA.
        """
        if not self.chain:
            return "Erro: A cadeia de RAG n√£o foi inicializada corretamente. Verifique as configura√ß√µes da API."
        
        return self.chain.invoke(question)


def format_etp_as_html(etp_text: str) -> str:
    """
    Formata o texto do ETP como HTML para melhor visualiza√ß√£o.

    Args:
        etp_text: Texto do ETP gerado

    Returns:
        str: HTML formatado
    """
    # Substituir quebras de linha por tags <br>
    html_content = etp_text.replace('\n', '<br>')

    # Adicionar estilos CSS
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>Estudo T√©cnico Preliminar</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                line-height: 1.6;
                margin: 40px;
                color: #333;
            }}
            h1, h2, h3, h4 {{
                color: #1E3A8A;
            }}
            h1 {{
                text-align: center;
                margin-bottom: 30px;
            }}
            h2 {{
                border-bottom: 1px solid #ddd;
                padding-bottom: 10px;
                margin-top: 30px;
            }}
            .header {{
                text-align: center;
                margin-bottom: 40px;
            }}
            .footer {{
                margin-top: 50px;
                text-align: center;
                font-size: 0.9em;
                color: #666;
            }}
            .section {{
                margin-bottom: 20px;
            }}
            table {{
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
            }}
            table, th, td {{
                border: 1px solid #ddd;
            }}
            th, td {{
                padding: 12px;
                text-align: left;
            }}
            th {{
                background-color: #f2f2f2;
            }}
        </style>
    </head>
    <body>
        <div class="header">
            <h1>ESTUDO T√âCNICO PRELIMINAR</h1>
            <p>Documento gerado em {st.session_state.get('data_geracao', 'Data n√£o dispon√≠vel')}</p>
        </div>
        
        <div class="content">
            {html_content}
        </div>
        
        <div class="footer">
            <p>Documento gerado automaticamente - Gerador de ETP</p>
        </div>
    </body>
    </html>
    """

    return html


def save_etp_as_pdf(html_content: str) -> bytes:
    """
    Converte o conte√∫do do ETP em um arquivo PDF usando ReportLab.

    Args:
        html_content: Conte√∫do HTML do ETP

    Returns:
        bytes: Conte√∫do do PDF em bytes
    """
    try:
        # Criar um buffer para o PDF
        buffer = io.BytesIO()

        # Configurar o documento PDF
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=72
        )

        # Estilos
        styles = getSampleStyleSheet()

        # Modificar estilos existentes em vez de adicionar novos com o mesmo nome
        title_style = styles['Title']
        title_style.fontSize = 16
        title_style.alignment = TA_CENTER
        title_style.spaceAfter = 20

        # Adicionar estilos personalizados com nomes √∫nicos
        styles.add(ParagraphStyle(
            name='Normal_Justify',
            parent=styles['Normal'],
            alignment=TA_JUSTIFY,
            fontSize=10,
            leading=14
        ))

        # Modificar estilos existentes
        heading2_style = styles['Heading2']
        heading2_style.fontSize = 14
        heading2_style.spaceAfter = 10
        heading2_style.spaceBefore = 15

        heading3_style = styles['Heading3']
        heading3_style.fontSize = 12
        heading3_style.spaceAfter = 8
        heading3_style.spaceBefore = 12

        # Remover tags HTML b√°sicas
        content = html_content.replace('<!DOCTYPE html>', '')
        content = re.sub(r'<html>.*?<body>', '', content, flags=re.DOTALL)
        content = content.replace('</body></html>', '')

        # Extrair o conte√∫do do HTML
        # Remover estilos e scripts
        content = re.sub(r'<style>.*?</style>', '', content, flags=re.DOTALL)
        content = re.sub(r'<script>.*?</script>', '', content, flags=re.DOTALL)

        # Substituir <br> por quebras de linha
        content = content.replace('<br>', '\n')

        # Remover outras tags HTML
        content = re.sub(r'<[^>]*>', '', content)

        # Dividir o conte√∫do em linhas
        lines = content.split('\n')

        # Elementos do documento
        elements = []

        # Adicionar t√≠tulo
        elements.append(
            Paragraph("ESTUDO T√âCNICO PRELIMINAR", styles['Title']))

        # Adicionar data
        data_geracao = st.session_state.get(
            'data_geracao', 'Data n√£o dispon√≠vel')
        elements.append(
            Paragraph(f"Documento gerado em {data_geracao}", styles['Normal']))
        elements.append(Spacer(1, 0.5*inch))

        # Processar o conte√∫do
        current_text = ""

        for line in lines:
            line = line.strip()
            if not line:
                if current_text:
                    elements.append(
                        Paragraph(current_text, styles['Normal_Justify']))
                    current_text = ""
                elements.append(Spacer(1, 0.1*inch))
            elif line.startswith('# '):
                if current_text:
                    elements.append(
                        Paragraph(current_text, styles['Normal_Justify']))
                    current_text = ""
                elements.append(Paragraph(line[2:], styles['Heading1']))
            elif line.startswith('## '):
                if current_text:
                    elements.append(
                        Paragraph(current_text, styles['Normal_Justify']))
                    current_text = ""
                elements.append(Paragraph(line[3:], styles['Heading2']))
            elif line.startswith('### '):
                if current_text:
                    elements.append(
                        Paragraph(current_text, styles['Normal_Justify']))
                    current_text = ""
                elements.append(Paragraph(line[4:], styles['Heading3']))
            elif re.match(r'^#{1,6}\s+', line):
                # Captura qualquer cabe√ßalho com 1-6 hashtags
                if current_text:
                    elements.append(
                        Paragraph(current_text, styles['Normal_Justify']))
                    current_text = ""
                header_level = len(re.match(r'^(#+)\s+', line).group(1))
                header_text = line[header_level+1:]
                if header_level <= 3:
                    elements.append(
                        Paragraph(header_text, styles[f'Heading{header_level}']))
                else:
                    # Para n√≠veis de cabe√ßalho acima de 3, use Heading3 com tamanho menor
                    elements.append(Paragraph(header_text, styles['Heading3']))
            else:
                if current_text:
                    current_text += " " + line
                else:
                    current_text = line

        # Adicionar o √∫ltimo par√°grafo
        if current_text:
            elements.append(Paragraph(current_text, styles['Normal_Justify']))

        # Adicionar rodap√©
        elements.append(Spacer(1, 0.5*inch))
        elements.append(Paragraph("Documento gerado automaticamente - Gerador de ETP",
                                  styles['Normal']))

        # Construir o PDF
        doc.build(elements)

        # Obter o conte√∫do do buffer
        pdf_bytes = buffer.getvalue()
        buffer.close()

        return pdf_bytes

    except Exception as e:
        st.error(f"Erro ao gerar PDF: {str(e)}")
        return None
